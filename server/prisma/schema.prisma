// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  role      UserRole   @default(UNIFIED)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Profile information
  name        String?
  avatar      String?
  phoneNumber String?
  dateOfBirth DateTime?
  bio         String?
  country     String?
  timezone    String?
  language    String?   @default("en")

  // Verification
  emailVerified DateTime?
  phoneVerified DateTime?

  // Settings
  notificationPreferences NotificationPreferences?
  paymentMethods          PaymentMethod[]
  withdrawalMethods       WithdrawalMethod[]

  // Activity tracking
  lastLoginAt  DateTime?
  lastActiveAt DateTime?
  loginCount   Int       @default(0)

  // Relations
  ownedSubscriptions  Subscription[] @relation("OwnerSubscriptions")
  memberSubscriptions Membership[]   @relation("SubscriptionMember")
  sentMessages        Message[]      @relation("MessageSender")
  receivedMessages    Message[]      @relation("MessageReceiver")
  notifications       Notification[]
  reviews             Review[]       @relation("ReviewAuthor")
  receivedReviews     Review[]       @relation("ReviewTarget")
  transactions        Transaction[]

  // 2FA
  twoFactorSecret  String?
  twoFactorEnabled Boolean @default(false)
  twoFactorMethod  String? // '2FA_APP' | 'SMS' | 'EMAIL'

  sessions Session[]
}

enum UserRole {
  ADMIN
  UNIFIED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING
}

model NotificationPreferences {
  id                  String  @id @default(cuid())
  user                User    @relation(fields: [userId], references: [id])
  userId              String  @unique
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  paymentReminders    Boolean @default(true)
  newMessages         Boolean @default(true)
  subscriptionUpdates Boolean @default(true)
  marketingEmails     Boolean @default(false)
}

model PaymentMethod {
  id                 String      @id @default(cuid())
  user               User        @relation(fields: [userId], references: [id])
  userId             String
  type               PaymentType
  provider           String
  cardNumber         String?
  cardHolderName     String?
  cardExpirationDate String?
  cardCvv            String?
  isDefault          Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  transactions Transaction[]
}

enum WithdrawalType {
  BANK_TRANSFER
  PAYPAL
}

model WithdrawalMethod {
  id                String         @id @default(cuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  type              WithdrawalType
  provider          String
  bankName          String?
  accountNumber     String?
  routingNumber     String?
  swiftCode         String?
  accountHolderName String?
  isDefault         Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
}

model Subscription {
  id                String     @id @default(cuid())
  title             String
  price             Float
  cycle             CycleType  @default(MONTHLY)
  maxMembers        Int        @default(4)
  description       String?
  profileAssignment String?
  visibility        Visibility @default(PUBLIC)
  status            Status     @default(ACTIVE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  service            Service?           @relation(fields: [serviceId], references: [id])
  serviceId          String?
  owner              User               @relation("OwnerSubscriptions", fields: [ownerId], references: [id])
  ownerId            String
  members            Membership[]
  accountCredentials AccountCredential?
  Transaction        Transaction[]
  Review             Review[]
}

model AccountCredential {
  id             String       @id @default(cuid())
  email          String
  password       String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String?
  logo          String?
  website       String?
  category      String?
  maxMembers    Int            @default(6)
  plans         Plan[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Plan {
  id         String    @id @default(cuid())
  name       String
  price      Float
  cycle      CycleType @default(MONTHLY)
  features   String[]
  maxMembers Int       @default(6)
  service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum CycleType {
  MONTHLY
  YEARLY
  QUARTERLY
  WEEKLY
}

enum Status {
  ACTIVE
  PENDING
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum Visibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

model Membership {
  id             String           @id @default(cuid())
  user           User             @relation("SubscriptionMember", fields: [userId], references: [id])
  userId         String
  subscription   Subscription     @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  joinedAt       DateTime         @default(now())
  role           MemberRole       @default(MEMBER)
  status         MembershipStatus @default(ACTIVE)

  // Payment tracking
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  paymentAmount   Float?

  // Access details
  accessProfile String? // e.g., "Profile 2" for Netflix

  @@unique([userId, subscriptionId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  PENDING
  SUSPENDED
  CANCELLED
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  currency    String            @default("USD")
  status      TransactionStatus
  type        TransactionType
  createdAt   DateTime          @default(now())
  processedAt DateTime?

  // Relations
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  PAYOUT
}

model Message {
  id          String      @id @default(cuid())
  content     String
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  receiver    User        @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId  String
  createdAt   DateTime    @default(now())
  read        Boolean     @default(false)
  readAt      DateTime?
  type        MessageType @default(TEXT)
  attachments String[]
}

enum MessageType {
  TEXT
  SYSTEM
  PAYMENT_REQUEST
  SUBSCRIPTION_INVITE
}

model Review {
  id             String       @id @default(cuid())
  rating         Int          @default(0)
  content        String?
  author         User         @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId       String
  target         User         @relation("ReviewTarget", fields: [targetId], references: [id])
  targetId       String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)
  readAt    DateTime?
  actionUrl String? // URL to redirect when notification is clicked
  metadata  Json? // Additional data specific to notification type
}

enum NotificationType {
  SUBSCRIPTION_INVITE
  PAYMENT_DUE
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  NEW_MESSAGE
  SUBSCRIPTION_EXPIRING
  MEMBER_JOINED
  MEMBER_LEFT
  SYSTEM
  REVIEW_RECEIVED
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  device    String // e.g., "iPhone 14 Pro", "MacBook Pro"
  browser   String // e.g., "Chrome", "Safari"
  os        String // e.g., "Windows", "iOS"
  location  String? // e.g., "New York, USA"
  ip        String?
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  token     String   @unique // JWT token hash
}
